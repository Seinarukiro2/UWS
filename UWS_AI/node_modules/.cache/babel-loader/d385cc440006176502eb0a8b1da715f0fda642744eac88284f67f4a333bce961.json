{"ast":null,"code":"import axios from 'axios';\n\n// Set up the base URL for your FastAPI backend\nconst API_URL = 'http://localhost:8081'; // Update this URL based on your FastAPI server configuration\n\n// Function to ask a question\nexport async function askQuestion(question, imagePath) {\n  try {\n    const response = await axios.post(`${API_URL}/ask/`, {\n      question,\n      image_path: imagePath || ''\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Обрабатываем данные из ответа\n    const responseData = response.data.response;\n    let content = 'No content available';\n    let logs = {};\n\n    // Проверяем тип и структуру responseData\n    if (typeof responseData === 'object' && responseData !== null) {\n      if (responseData.response) {\n        // responseData.response это объект с полем content\n        content = responseData.response.content || 'No content available';\n        logs = responseData.response.logs || {};\n      } else if (typeof responseData === 'string') {\n        // Если responseData это строка\n        content = responseData;\n      }\n    }\n    return {\n      content,\n      logs\n    };\n  } catch (error) {\n    console.error(\"Error asking question:\", error);\n    throw error;\n  }\n}\n\n// Function to upload a file\nexport async function uploadFile(file) {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await axios.post(`${API_URL}/upload/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.filename;\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    throw error;\n  }\n}\n\n// Function to load data from a given URL\n\n// Function to load data from URL\n// Function to load data from URL\n// Функция для загрузки данных из URL\nexport async function loadData(url) {\n  try {\n    const response = await axios.post(`${API_URL}/load_data/`, {\n      url\n    },\n    // Передаем URL в теле запроса\n    {\n      headers: {\n        'Content-Type': 'application/json' // Указываем, что отправляем JSON\n      }\n    });\n    return response.data; // Возвращаем данные из ответа\n  } catch (error) {\n    console.error(\"Error loading data:\", error); // Логируем ошибку\n    throw error; // Пробрасываем ошибку дальше\n  }\n}","map":{"version":3,"names":["axios","API_URL","askQuestion","question","imagePath","response","post","image_path","headers","responseData","data","content","logs","error","console","uploadFile","file","formData","FormData","append","filename","loadData","url"],"sources":["/Users/seinarukiro/Documents/UWS/AI-UI/ai-extension/src/pages/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Set up the base URL for your FastAPI backend\nconst API_URL = 'http://localhost:8081'; // Update this URL based on your FastAPI server configuration\n\n// Function to ask a question\nexport async function askQuestion(question, imagePath) {\n  try {\n    const response = await axios.post(`${API_URL}/ask/`, {\n      question,\n      image_path: imagePath || ''\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Обрабатываем данные из ответа\n    const responseData = response.data.response;\n\n    let content = 'No content available';\n    let logs = {};\n\n    // Проверяем тип и структуру responseData\n    if (typeof responseData === 'object' && responseData !== null) {\n      if (responseData.response) {\n        // responseData.response это объект с полем content\n        content = responseData.response.content || 'No content available';\n        logs = responseData.response.logs || {};\n      } else if (typeof responseData === 'string') {\n        // Если responseData это строка\n        content = responseData;\n      }\n    }\n\n    return { content, logs };\n  } catch (error) {\n    console.error(\"Error asking question:\", error);\n    throw error;\n  }\n}\n\n\n\n// Function to upload a file\nexport async function uploadFile(file) {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await axios.post(`${API_URL}/upload/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    return response.data.filename;\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    throw error;\n  }\n}\n\n// Function to load data from a given URL\n\n// Function to load data from URL\n// Function to load data from URL\n// Функция для загрузки данных из URL\nexport async function loadData(url) {\n  try {\n    const response = await axios.post(`${API_URL}/load_data/`, \n      { url }, // Передаем URL в теле запроса\n      {\n        headers: {\n          'Content-Type': 'application/json' // Указываем, что отправляем JSON\n        }\n      }\n    );\n    return response.data; // Возвращаем данные из ответа\n  } catch (error) {\n    console.error(\"Error loading data:\", error); // Логируем ошибку\n    throw error; // Пробрасываем ошибку дальше\n  }\n}\n\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC;AACA,OAAO,eAAeC,WAAWA,CAACC,QAAQ,EAAEC,SAAS,EAAE;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,OAAO,EAAE;MACnDE,QAAQ;MACRI,UAAU,EAAEH,SAAS,IAAI;IAC3B,CAAC,EAAE;MACDI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAGJ,QAAQ,CAACK,IAAI,CAACL,QAAQ;IAE3C,IAAIM,OAAO,GAAG,sBAAsB;IACpC,IAAIC,IAAI,GAAG,CAAC,CAAC;;IAEb;IACA,IAAI,OAAOH,YAAY,KAAK,QAAQ,IAAIA,YAAY,KAAK,IAAI,EAAE;MAC7D,IAAIA,YAAY,CAACJ,QAAQ,EAAE;QACzB;QACAM,OAAO,GAAGF,YAAY,CAACJ,QAAQ,CAACM,OAAO,IAAI,sBAAsB;QACjEC,IAAI,GAAGH,YAAY,CAACJ,QAAQ,CAACO,IAAI,IAAI,CAAC,CAAC;MACzC,CAAC,MAAM,IAAI,OAAOH,YAAY,KAAK,QAAQ,EAAE;QAC3C;QACAE,OAAO,GAAGF,YAAY;MACxB;IACF;IAEA,OAAO;MAAEE,OAAO;MAAEC;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;;AAIA;AACA,OAAO,eAAeE,UAAUA,CAACC,IAAI,EAAE;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,MAAMX,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,UAAU,EAAEgB,QAAQ,EAAE;MAChET,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOH,QAAQ,CAACK,IAAI,CAACU,QAAQ;EAC/B,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF;;AAEA;;AAEA;AACA;AACA;AACA,OAAO,eAAeQ,QAAQA,CAACC,GAAG,EAAE;EAClC,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,aAAa,EACvD;MAAEqB;IAAI,CAAC;IAAE;IACT;MACEd,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB,CAAC;MACrC;IACF,CACF,CAAC;IACD,OAAOH,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC7C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}